// Simulate ExtMon signal from POT and going through the collimator
// filter channel.  Filter on particles reaching collimator1 entrance
// not necessarily passing the whole channel.
// Use severe cuts to speed up the jobs, so the signal yield estimate
// may be 20% off, but this still validates the geometry of the channel.
//
// Andrei Gaponenko, 2024

#include "Offline/fcl/minimalMessageService.fcl"
#include "Offline/fcl/standardProducers.fcl"
#include "Offline/fcl/standardServices.fcl"

process_name : extMonSignalRoughFull

source : { module_type : EmptyEvent  maxEvents : @nil }

services : @local::Services.Sim

physics : {

   producers:  {
      genCounter: {
         module_type: GenEventCounter
      }

      generate: @local::PrimaryProtonGun

      g4run : @local::mu2eg4runDefaultSingleStage

      compressPVSignal: {
         module_type: "CompressPhysicalVolumes"
         hitInputs: []
         particleInputs: [ "SignalFilter" ]
         volumesInput: "g4run"
      }
   }

   filters: {
      g4consistent: {
         module_type: FilterStatusG4
         input: "g4run"
         maxAcceptedStatus: 9  #  status 10 and above means StepPointMCCollection may have non-dereferencable pointers
      }

      SignalFilter: {
         module_type: "FilterG4Out"
         mainHitInputs: [ "g4run:EMFC1Entrance" ]
         extraHitInputs: [ "g4run:virtualdetector" ]
         mcTrajectoryInputs: [ "g4run" ]
      }

   }

   analyzers: {

      genCountLogger: {
         module_type: GenEventCountReader
      }

      andrprint: {
         module_type: SimParticlesPrinter
         inputCollection: "g4run"
      }
   }

   signalpath: [genCounter, generate, g4run, g4consistent, SignalFilter, compressPVSignal ]
   e1: [all, signalout, genCountLogger]

   trigger_paths  : [signalpath]
   end_paths      : [e1]
}

outputs:  {
   all : {
      module_type   :   RootOutput
      fileName      :   "sim.owner.extMonSignalRough-full-all.ver.seq.art"
   }
   signalout : {
      module_type   :   RootOutput
      fileName      :   "sim.owner.extMonSignalRough-full-EMFC1Entrance.ver.seq.art"
      SelectEvents: [ "signalpath" ]
      outputCommands: [
         "drop *_*_*_*",
         "keep art::EventIDs_*_*_*",
         "keep mu2e::GenParticles_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep *_SignalFilter_*_*",
         "keep *_compressPVSignal_*_*"
      ]
   }
   dump: { module_type: DataProductDump }
}
//================================================================
//physics.producers.g4run.physics.physicsListName : "ShieldingM"
//physics.producers.g4run.physics.physicsListName : "MinDEDX"
//physics.producers.g4run.physics.physicsListName : "QGSP_BERT"

physics.producers.g4run.SDConfig: { enableSD: [ "virtualdetector" ] TimeVD: { times: [] } }
physics.producers.g4run.TrajectoryControl: {
   produce: true
   defaultMinPointDistance: 50
   mcTrajectoryMinSteps: 1
   mcTrajectoryMomentumCut: 1000
   saveTrajectoryMomentumCut: 1000
}

physics.producers.g4run.Mu2eG4StackingOnlyCut: {
   type: notPdgId
   pars: [ 2212 ]
}
physics.producers.g4run.Mu2eG4SteppingOnlyCut: {
   type: union
   pars: [
      {
         type: kineticEnergy
         cut: 2200 # Ek=2200 MeV/c2 is p=3000 MeV/c for proton
      },
      {
         type: inVolume
         pars: [ "ProtonBeamDumpCore", "ProtonBeamDumpFront" ]
      },
      {
         type: intersection
         pars: [
            {
               type: inVolume
               pars: [ "VirtualDetector_EMFC1Entrance" ]
               write: "EMFC1Entrance"
            },
            { type: constant value: false } // do not stop here, just trigger the write
         ]
      }
   ]
}

services.TFileService.fileName: "/dev/null"

// allow to use multiple threads
//physics.producers.g4run.module_type : "Mu2eG4MT"

services.SeedService.baseSeed         :   8
services.SeedService.maxUniqueEngines :  20
